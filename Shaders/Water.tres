[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://b4pu3fb16gjm4"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_t3i2r"]
constant = 0.5

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_him3c"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0.325, 0.2, 0.2), 2, 1e-05]
type = 4
function = 2

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_ysfg4"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(0.325, 0.2, 0.2), 2, 1e-05]
type = 4
function = 2

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_urmet"]
parameter_name = "noise1"

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_siehi"]
parameter_name = "noise2"
color_default = 1

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_yj8d6"]
parameter_name = "ColorParameter"
default_value_enabled = true
default_value = Color(0, 0.34664, 0.668477, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_c1f5b"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_u654j"]
output_port_for_preview = 0
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[resource]
code = "shader_type spatial;
render_mode world_vertex_coords;

uniform vec4 ColorParameter : source_color = vec4(0.000000, 0.346640, 0.668477, 1.000000);
uniform sampler2D noise1;
uniform sampler2D noise2 : hint_default_black;


// TextureUniformTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureUniformTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}

void fragment() {
// ColorParameter:7
	vec4 n_out7p0 = ColorParameter;


// TextureUniformTriplanar:2
	vec4 n_out2p0 = triplanar_texture(noise1, triplanar_power_normal, triplanar_pos);


	bool n_out12p0;
// Compare:12
	vec3 n_in12p1 = vec3(0.32500, 0.20000, 0.20000);
	{
		bvec3 _bv = greaterThan(vec3(n_out2p0.xyz), n_in12p1);
		n_out12p0 = all(_bv);
	}


// TextureUniformTriplanar:4
	vec4 n_out4p0 = triplanar_texture(noise2, triplanar_power_normal, triplanar_pos);


	bool n_out16p0;
// Compare:16
	vec3 n_in16p1 = vec3(0.32500, 0.20000, 0.20000);
	{
		bvec3 _bv = greaterThan(vec3(n_out4p0.xyz), n_in16p1);
		n_out16p0 = all(_bv);
	}


// VectorOp:9
	vec4 n_out9p0 = vec4(n_out12p0 ? 1.0 : 0.0) * vec4(n_out16p0 ? 1.0 : 0.0);


// VectorOp:8
	vec4 n_out8p0 = n_out7p0 + n_out9p0;


// FloatConstant:10
	float n_out10p0 = 0.500000;


// Output:0
	ALBEDO = vec3(n_out8p0.xyz);
	ALPHA = n_out10p0;


}
"
graph_offset = Vector2(178.359, 174.526)
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2(1300, 60)
nodes/fragment/0/position = Vector2(2180, 280)
nodes/fragment/2/node = SubResource("VisualShaderNodeTextureParameterTriplanar_urmet")
nodes/fragment/2/position = Vector2(100, 0)
nodes/fragment/4/node = SubResource("VisualShaderNodeTextureParameterTriplanar_siehi")
nodes/fragment/4/position = Vector2(80, 360)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorParameter_yj8d6")
nodes/fragment/7/position = Vector2(1180, -140)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorOp_c1f5b")
nodes/fragment/8/position = Vector2(1440, 20)
nodes/fragment/9/node = SubResource("VisualShaderNodeVectorOp_u654j")
nodes/fragment/9/position = Vector2(1100, 280)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatConstant_t3i2r")
nodes/fragment/10/position = Vector2(1480, 340)
nodes/fragment/12/node = SubResource("VisualShaderNodeCompare_him3c")
nodes/fragment/12/position = Vector2(780, 160)
nodes/fragment/16/node = SubResource("VisualShaderNodeCompare_ysfg4")
nodes/fragment/16/position = Vector2(788.254, 428.422)
nodes/fragment/connections = PackedInt32Array(7, 0, 8, 0, 9, 0, 8, 1, 10, 0, 0, 1, 12, 0, 9, 0, 16, 0, 9, 1, 8, 0, 0, 0, 2, 0, 12, 0, 4, 0, 16, 0)
